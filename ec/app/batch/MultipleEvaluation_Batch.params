# Copyright 2006 by Sean Luke and George Mason University
# Licensed under the Academic Free License version 3.0
# See the file "LICENSE" for more information

#checkpoint = true
#checkpoint-directory = /tmp/

#jobs = 50
parent.0 = ../../gp/koza/koza.params

seed.0 = 8888


breed = ec.app.batch.MyBreeder

#The number of population size
pop.subpop.0.size = 500

#The max generations
generations = 50


# Subsidiary pipelines:
breed.elite.0 = 5
# We want to reevaluate elites
breed.reevaluate-elites.0 = true

#loadFromFile = true
#pop.file = /tmp/job.0.allRules.log
#pop.subpop.0.species.pipe.num-sources = 2
#pop.subpop.0.species.pipe.source.0 = ec.app.batch.NewDuplicateRemovalCrossoverPipeline
#pop.subpop.0.species.pipe.source.0.prob = 0.9
#pop.subpop.0.species.pipe.source.1 = ec.app.batch.NewDuplicateRemovalMutationPipeline
#pop.subpop.0.species.pipe.source.1.prob = 0.1

pop.subpop.0.species.pipe.num-sources = 2
pop.subpop.0.species.pipe.source.0 = ec.gp.koza.CrossoverPipeline
pop.subpop.0.species.pipe.source.0.prob = 0.95
pop.subpop.0.species.pipe.source.1 = ec.gp.koza.MutationPipeline
pop.subpop.0.species.pipe.source.1.prob = 0.05

#gp.koza.xover.source.0 = ec.app.batch.Selection.IndifferenceZoneSelection
#gp.koza.xover.source.1 = same
#gp.koza.mutate.source.0 = ec.app.batch.Selection.IndifferenceZoneSelection

#Duplication Removal (new added parameter 2017.09.14)
pop.subpop.0.duplicate-removals = true
pop.subpop.0.duplicate-removals-tries = 100000

# We have one function set, of class GPFunctionSet
gp.fs.size = 1
gp.fs.0 = ec.gp.GPFunctionSet
# We'll call the function set "f0".
gp.fs.0.name = f0

# We have five functions in the function set.  They are:
gp.fs.0.size = 20
gp.fs.0.func.0 = ec.app.batch.FPT
gp.fs.0.func.0.nc = nc0
gp.fs.0.func.1 = ec.app.batch.SPT
gp.fs.0.func.1.nc = nc0
gp.fs.0.func.2 = ec.app.batch.FSUMPT
gp.fs.0.func.2.nc = nc0
gp.fs.0.func.3 = ec.app.batch.FMAXPT
gp.fs.0.func.3.nc = nc0
gp.fs.0.func.4 = ec.app.batch.FMINPT
gp.fs.0.func.4.nc = nc0
gp.fs.0.func.5 = ec.app.batch.SSUMPT
gp.fs.0.func.5.nc = nc0
gp.fs.0.func.6 = ec.app.batch.SMAXPT
gp.fs.0.func.6.nc = nc0
gp.fs.0.func.7 = ec.app.batch.SMINPT
gp.fs.0.func.7.nc = nc0
gp.fs.0.func.8 = ec.app.batch.RFMAXPT
gp.fs.0.func.8.nc = nc0
gp.fs.0.func.9 = ec.app.batch.RFMINPT
gp.fs.0.func.9.nc = nc0
gp.fs.0.func.10 = ec.app.batch.RSSUMPT
gp.fs.0.func.10.nc = nc0
gp.fs.0.func.11 = ec.app.batch.RSMAXPT
gp.fs.0.func.11.nc = nc0
gp.fs.0.func.12 = ec.app.batch.RSMINPT
gp.fs.0.func.12.nc = nc0
gp.fs.0.func.13 = ec.app.batch.SMAXPT
gp.fs.0.func.13.nc = nc0
gp.fs.0.func.14 = ec.app.batch.Add
gp.fs.0.func.14.nc = nc2
gp.fs.0.func.15 = ec.app.batch.Sub
gp.fs.0.func.15.nc = nc2
gp.fs.0.func.16 = ec.app.batch.Multi
gp.fs.0.func.16.nc = nc2
gp.fs.0.func.17 = ec.app.batch.Div
gp.fs.0.func.17.nc = nc2
gp.fs.0.func.18 = ec.app.batch.If
gp.fs.0.func.18.nc = nc3
gp.fs.0.func.19 = ec.app.batch.Max
gp.fs.0.func.19.nc = nc2

gp.tree.print-style = c
gp.tree.printTwoArgumentNonterminalsAsOperatorsInC = false

#stat = ec.gp.koza.KozaShortStatistics
stat = ec.app.batch.ExtendFinalEvaluationStatistics
stat.do-per-generation-description = true
stat.file = /log/Result_Evaluation.stat
stat.fileEx = /log/allRules.log

stat.num-children = 1
stat.child.0 = ec.app.batch.MyGPStatistics
#stat.child.0 = ec.gp.koza.KozaShortStatistics
stat.child.0.do-depth = true
stat.child.0.do-time = true
stat.child.0.do-size = true
stat.child.0.file = /log/Details_Evaluation.stat

#The evaluator for in-generation fitness
#eval=ec.simple.SimpleEvaluator
eval = ec.app.batch.TSIDOCBAEvaluator
#eval = ec.app.JSP.OCBAEvaluator
#eval = ec.app.JSP.KnowledgeGradientEvaluator
#eval = ec.app.JSP.KnowledgeGradientEvaluator
eval.problem = ec.app.batch.BatchProblem
eval.problem.data = ec.app.batch.DoubleData

# The tree uses an ec.gp.koza.HalfBuilder to create
# itself initially.
# HalfBuilder will pick GROW half the time and FULL
# the other half, with a ramp from 2 to 6 inclusive.
# By ramp we mean that it first picks a random number between
# 2 and 6 inclusive.  This then becomes the *maximum* tree size
# (for the FULL approach, it's the tree size of the tree, for
# GROW, the tree can get no bigger than this)

gp.tc.0.init = ec.gp.koza.HalfBuilder

# We set the default for HalfBuilder to be a ramp of 2--6,
# with a grow probability of 0.5  
gp.koza.half.min-depth = 2
gp.koza.half.max-depth = 6
gp.koza.half.growp = 0.5

#Parsimony Pressure


#Simulation setting
#If use Normalization 0:not in use 1: in use

eval.problem.Simulation.Replications = 1
eval.problem.Simulation.Seed = 199608095920
#1: Mean flowtime 2: CMax 3: TT(Total Tardiness) 4 TWT(Total Weighted Tardiness)
#11: Mean flowtime Deviation
#eval=ec.simple.SimpleEvaluator
eval = ec.app.batch.TSIDOCBAEvaluator
#eval = ec.app.batch.OCBAEvaluator
#eval = ec.app.batch.KnowledgeGradientEvaluator

eval.problem.Simulation.UniqueSeed = true
eval.Simulation.IterationBudget = 20
eval.Simulation.WarmupBudget = 5
eval.Simulation.WarmupBudget_Pre = 5
eval.Simulation.FirstStageBudget = 5
eval.Simulation.SecondStageBudget = 5
eval.Simulation.IndifferenceDelta = 0.35

doFinalEvaluation = true 
evaluation.UseOldSample = true
evaluation.Seed = 778899
evaluation.Evaluator = EA,IDOCBA,OCBA,KG,AOAP,RS
#evaluation.Evaluator = EA
evaluation.Replications = 10
evaluation.Threshold = 200
evaluation.InitialReplications = 5
evaluation.IterationBudget = 5
evaluation.IDOCBA.WarmupBudget = 5
evaluation.IDOCBA.FirstStageBudget = 10
evaluation.IDOCBA.IndifferenceDelta = 0.01